import threading
import base64
import io
import os
import time  # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
from socket import *
from customtkinter import *
from tkinter import filedialog
from PIL import Image

class MainWindow(CTk):
    def __init__(self):
        super().__init__()
        self.geometry('400x300')
        self.label = None
        self.entry = None

        self.menu_frame = CTkFrame(self, fg_color='light blue', width=30, height=300)
        self.menu_frame.pack_propagate(False)
        self.menu_frame.place(x=0, y=0)
        self.is_show_menu = False
        self.speed_animate_menu = -5
        #–∫–Ω–æ–ø–∫–∞
        self.btn = CTkButton(self, text='‚ñ∂Ô∏è', command=self.toggle_show_menu, width=30)
        self.btn.place(x=0, y=0)
        # —Ç–µ–º–∞ –≤—ñ–∫–Ω–∞
        self.label_theme = CTkOptionMenu(self.menu_frame, values=['–¢–µ–º–Ω–∞', '–°–≤—ñ—Ç–ª–∞'], command=self.change_theme)
        self.label_theme.pack(side='bottom', pady=20)
        self.theme = None

        self.chat_field = CTkScrollableFrame(self)
        self.chat_field.place(x=0, y=0)

        # –î–æ–¥–∞–Ω–æ —Ñ—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.users_frame = CTkScrollableFrame(self, width=150, height=100)
        self.users_frame.place(x=0, y=0)  # –ü–æ–∑–∏—Ü—ñ—è –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ adaptive_ui

        # –î–æ–¥–∞–Ω–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –º—ñ—Ç–æ–∫ —É GUI
        self.online_users = {}  # {username: (last_activity_time, label_widget)}

        self.message_input = CTkEntry(self, placeholder_text='–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')
        self.message_input.place(x=0, y=250)
        self.send_button = CTkButton(self, text='‚ñ∂', width=40, height=30, command=self.send_message)
        self.send_button.place(x=200, y=250)
        self.open_img_button = CTkButton(self, text='üìÇ', width=40, height=30, command=self.open_image)
        self.open_img_button.place(x=0, y=0)  # –¢–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –±—É–¥—É—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—ñ –≤ —Ñ—É–Ω–∫—Ü—ñ—ó adaptive_ui
        self.username = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'

        try:
            self.sock = socket(AF_INET, SOCK_STREAM)
            self.sock.connect(('localhost', 8080))
            # –ó–º—ñ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            hello = f"STATUS@{self.username}@online\n"
            self.sock.send(hello.encode('utf-8'))
            hello_text = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
            self.sock.send(hello_text.encode('utf-8'))
            threading.Thread(target=self.recv_message, daemon=True).start()
            
            # –î–æ–¥–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å—É –æ–Ω–ª–∞–π–Ω
            threading.Thread(target=self.send_online_status, daemon=True).start()
            
            # –î–æ–¥–∞–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            threading.Thread(target=self.check_users_status, daemon=True).start()
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

        self.adaptive_ui()

    # –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å—É "–æ–Ω–ª–∞–π–Ω"
    def send_online_status(self):
        while True:
            try:
                status_msg = f"STATUS@{self.username}@online\n"
                self.sock.send(status_msg.encode('utf-8'))
                time.sleep(10)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
            except:
                break

    # –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    def check_users_status(self):
        while True:
            current_time = time.time()
            users_to_remove = []
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            for username, (last_activity, label) in self.online_users.items():
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–Ω–∞–¥ 30 —Å–µ–∫—É–Ω–¥, –≤–≤–∞–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ñ–ª–∞–π–Ω
                if current_time - last_activity > 30:
                    users_to_remove.append(username)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤–∏–π—à–ª–∏ –æ—Ñ–ª–∞–π–Ω
            for username in users_to_remove:
                self.update_user_status(username, "offline")
            
            time.sleep(5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥

    # –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É GUI
    def update_user_status(self, username, status):
        if status == "online":
            current_time = time.time()
            if username in self.online_users:
                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –º—ñ—Ç–∫—É
                last_activity, label = self.online_users[username]
                self.online_users[username] = (current_time, label)
                label.configure(text=f"{username} üü¢", text_color="green")
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –º—ñ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                label = CTkLabel(self.users_frame, text=f"{username} üü¢", text_color="green")
                label.pack(anchor="w", pady=2)
                self.online_users[username] = (current_time, label)
        elif status == "offline" and username in self.online_users:
            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –æ—Ñ–ª–∞–π–Ω
            _, label = self.online_users[username]
            label.configure(text=f"{username} üî¥", text_color="gray")
            # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
            # –ó–∞–ª–∏—à–∞—î–º–æ —É —Å–ø–∏—Å–∫—É –Ω–∞ –¥–µ—è–∫–∏–π —á–∞—Å, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ –≤–æ–Ω–∏ –≤–∏–π—à–ª–∏
            self.after(60000, lambda: self.remove_offline_user(username))  # –í–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É

    # –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ñ–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    def remove_offline_user(self, username):
        if username in self.online_users:
            _, label = self.online_users.pop(username)
            label.destroy()

    def toggle_show_menu(self):
        if self.is_show_menu:
            self.is_show_menu = False
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚ñ∂Ô∏è')
            self.show_menu()
        else:
            self.is_show_menu = True
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚óÄÔ∏è')
            self.show_menu()
            # setting menu widgets
            self.label = CTkLabel(self.menu_frame, text='–Ü–º º—è')
            self.label.pack(pady=30)
            self.entry = CTkEntry(self.menu_frame)
            self.entry.pack()
            self.save_btn = CTkButton(self.menu_frame, text='–ó–±–µ—Ä–µ–≥—Ç–∏', command=self.save_username)
            self.save_btn.pack(pady=10)
    
    def save_username(self):
        if self.entry and self.entry.get().strip():
            old_username = self.username
            self.username = self.entry.get().strip()
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ
            self.add_message(f"–í–∞—à–µ —ñ–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {self.username}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–∑ –Ω–æ–≤–∏–º —ñ–º'—è–º
            status_msg = f"STATUS@{self.username}@online\n"
            self.sock.send(status_msg.encode('utf-8'))
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ
            rename_msg = f"TEXT@{self.username}@[SYSTEM] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {old_username} –∑–º—ñ–Ω–∏–≤(–ª–∞) —ñ–º'—è –Ω–∞ {self.username}\n"
            self.sock.send(rename_msg.encode('utf-8'))

    def show_menu(self):
        self.menu_frame.configure(width=self.menu_frame.winfo_width() + self.speed_animate_menu)
        if not self.menu_frame.winfo_width() >= 200 and self.is_show_menu:
            self.after(10, self.show_menu)
        elif self.menu_frame.winfo_width() >= 40 and not self.is_show_menu:
            self.after(10, self.show_menu)
            if hasattr(self, 'label') and self.label:
                self.label.destroy()
            if hasattr(self, 'entry') and self.entry:
                self.entry.destroy()
            if hasattr(self, 'save_btn') and self.save_btn:
                self.save_btn.destroy()

    def change_theme(self, value):
        if value == '–¢–µ–º–Ω–∞':
            set_appearance_mode('dark')
            self.menu_frame.configure(fg_color='dodger blue')
        else:
            set_appearance_mode('light')
            self.menu_frame.configure(fg_color='light blue')

    def adaptive_ui(self):
        self.menu_frame.configure(height=self.winfo_height())
        self.chat_field.place(x=self.menu_frame.winfo_width())
        
        # –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        chat_width = self.winfo_width() - self.menu_frame.winfo_width() - 150  # –í–∏–¥—ñ–ª—è—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –ø–∞–Ω–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.chat_field.configure(width=chat_width, height=self.winfo_height() - 40)
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ –ø–∞–Ω–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–ø—Ä–∞–≤–∞
        self.users_frame.place(x=self.winfo_width() - 150, y=0)
        self.users_frame.configure(height=self.winfo_height() - 40)
        
        self.send_button.place(x=self.winfo_width() - 100, y=self.winfo_height() - 40)
        self.open_img_button.place(x=self.winfo_width() - 50, y=self.winfo_height() - 40)
        self.message_input.place(x=self.menu_frame.winfo_width(), y=self.send_button.winfo_y())
        self.message_input.configure(
            width=self.winfo_width() - self.menu_frame.winfo_width() - 110)

        self.after(50, self.adaptive_ui)

    def add_message(self, message, img=None):
        message_frame = CTkFrame(self.chat_field, fg_color='grey')
        message_frame.pack(pady=5, anchor='w')
        wrapleng_size = self.chat_field.winfo_width() - 40  # –û–Ω–æ–≤–ª–µ–Ω–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó —à–∏—Ä–∏–Ω–∏

        if not img:
            CTkLabel(message_frame, text=message, wraplength=wrapleng_size,
                     text_color='white', justify='left').pack(padx=10, pady=5)
        else:
            CTkLabel(message_frame, text=message, wraplength=wrapleng_size,
                     text_color='white', image=img, compound='top',
                     justify='left').pack(padx=10, pady=5)

    def send_message(self):
        message = self.message_input.get()
        if message:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            data = f"TEXT@{self.username}@{message}\n"
            try:
                self.sock.sendall(data.encode())
                self.add_message(f"{self.username}: {message}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                status_msg = f"STATUS@{self.username}@online\n"
                self.sock.send(status_msg.encode('utf-8'))
            except Exception as e:
                self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")
        self.message_input.delete(0, END)

    def recv_message(self):
        buffer = ""
        while True:
            try:
                chunk = self.sock.recv(4096)
                if not chunk:
                    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ
                    self.add_message("[SYSTEM] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ")
                    break
                buffer += chunk.decode('utf-8', errors='ignore')

                # –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                while "\n" in buffer:
                    line, buffer = buffer.split("\n", 1)
                    self.handle_line(line.strip())
            except Exception as e:
                self.add_message(f"[SYSTEM] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {e}")
                break
        # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        self.sock.close()
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –≤–∏—Ö—ñ–¥
        status_msg = f"STATUS@{self.username}@offline\n"
        try:
            self.sock.send(status_msg.encode('utf-8'))
        except:
            pass

    def handle_line(self, line):
        if not line:
            return
        parts = line.split("@", 3)
        if len(parts) < 2:
            self.add_message(line)
            return

        msg_type = parts[0]

        if msg_type == "TEXT":
            if len(parts) >= 3:
                author = parts[1]
                message = parts[2]
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –Ω–∞—à–µ –≤–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if author != self.username:
                    self.add_message(f"{author}: {message}")
        elif msg_type == "IMAGE":
            if len(parts) >= 4:
                author = parts[1]
                filename = parts[2]
                b64_img = parts[3]
                try:
                    img_data = base64.b64decode(b64_img)
                    pil_img = Image.open(io.BytesIO(img_data))
                    ctk_img = CTkImage(pil_img, size=(300, 300))
                    self.add_message(f"{author} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}", img=ctk_img)
                except Exception as e:
                    self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É —Å—Ç–∞—Ç—É—Å—ñ–≤
        elif msg_type == "STATUS":
            if len(parts) >= 3:
                username = parts[1]
                status = parts[2]
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if username != self.username:  # –ù–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                    self.update_user_status(username, status)
        else:
            self.add_message(line)

    def open_image(self):
        file_name = filedialog.askopenfilename(
            filetypes=[("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "*.jpg *.jpeg *.png *.gif *.bmp")])
        if not file_name:
            return
        try:
            # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
            pil_img = Image.open(file_name)
            # –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            max_size = (800, 800)
            pil_img.thumbnail(max_size, Image.Resampling.LANCZOS)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            img_buffer = io.BytesIO()
            pil_img.save(img_buffer, format=pil_img.format if pil_img.format else 'PNG')
            img_buffer.seek(0)
            raw = img_buffer.read()

            b64_data = base64.b64encode(raw).decode()
            short_name = os.path.basename(file_name)
            data = f"IMAGE@{self.username}@{short_name}@{b64_data}\n"
            self.sock.sendall(data.encode())

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
            ctk_img = CTkImage(pil_img, size=(300, 300))
            self.add_message(f"{self.username} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {short_name}", img=ctk_img)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            status_msg = f"STATUS@{self.username}@online\n"
            self.sock.send(status_msg.encode('utf-8'))
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    # –î–æ–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
    def on_closing(self):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ö—ñ–¥
        try:
            status_msg = f"STATUS@{self.username}@offline\n"
            self.sock.send(status_msg.encode('utf-8'))
            goodbye_msg = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø–æ–∫–∏–Ω—É–≤(–ª–∞) —á–∞—Ç\n"
            self.sock.send(goodbye_msg.encode('utf-8'))
            self.sock.close()
        except:
            pass
        self.destroy()

win = MainWindow()
# –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
win.protocol("WM_DELETE_WINDOW", win.on_closing)
win.mainloop()
